 #define CBUFFER_SIZE 100


#include "Wire.h"
#include "sensorbar.h"


// Uncomment one of the four lines to match your SX1509's address
//  pin selects. SX1509 breakout defaults to [0:0] (0x3E).
const uint8_t SX1509_ADDRESS = 0x3E;  // SX1509 I2C address (00)
//const byte SX1509_ADDRESS = 0x3F;  // SX1509 I2C address (01)
//const byte SX1509_ADDRESS = 0x70;  // SX1509 I2C address (10)
//const byte SX1509_ADDRESS = 0x71;  // SX1509 I2C address (11)


SensorBar mySensorBar(SX1509_ADDRESS);


CircularBuffer positionHistory(CBUFFER_SIZE);




void setup()
{
  Serial.begin(115200);  // start serial for output
  Serial.println("Program started.");
  Serial.println();
  
  //For this demo, the IR will only be turned on during reads.
  mySensorBar.setBarStrobe();
  //Other option: Command to run all the time
  //mySensorBar.clearBarStrobe();


  //Default dark on light
  mySensorBar.clearInvertBits();
  //Other option: light line on dark
  //mySensorBar.setInvertBits();
  
  uint8_t returnStatus = mySensorBar.begin();
  if(returnStatus)
  {
	  Serial.println("sx1509 IC communication OK");
  }
  else
  {
	  Serial.println("sx1509 IC communication FAILED!");
	  while(1);
  }
  Serial.println();
  
}


void loop()
{
  //Wait 50 ms
  delay(25);




  //Get the data from the bar and save it to the circular buffer positionHistory.
  int temp = mySensorBar.getDensity();
  if( (temp < 4)&&(temp > 0) )
  {
    positionHistory.pushElement( mySensorBar.getPosition());
  }




  //print me a meter!
  {
    int16_t i;
	//Get an average of the last 'n' readings
    int16_t avePos = positionHistory.averageLast( 10 );
    Serial.print("Scale = 5/char :");
    for( i = -130; i <= 130; i = i + 5 )
    {
      if( i < 0 )
      {
        //if avePos within 5 of i
        if((avePos > (i - 3)) && (avePos <= (i + 2)))
        {
          Serial.print("*");
        }
        else
        {
          Serial.print("-");
        }
      }
      else if( i == 0 )
      {
        //if avePos within 5 of i
        if((avePos > (i - 3)) && (avePos <= (i + 2)))
        {
          Serial.print("*");
        }
        else
        {
          Serial.print("+");
        }
      }
      else if( i > 0 )
      {
        //if avePos within 5 of i
        if((avePos > (i - 3)) && (avePos <= (i + 2)))
        {
          Serial.print("*");
        }
        else
        {
          Serial.print("-");
        }
      }
    }
    Serial.print(" avePos = ");
    Serial.println(avePos);
  }
}




// Uncomment one of the four lines to match your SX1509's address
//  pin selects. SX1509 breakout defaults to [0:0] (0x3E).
const uint8_t SX1509_ADDRESS = 0x3E;  // SX1509 I2C address (00)
//const byte SX1509_ADDRESS = 0x3F;  // SX1509 I2C address (01)
//const byte SX1509_ADDRESS = 0x70;  // SX1509 I2C address (10)
//const byte SX1509_ADDRESS = 0x71;  // SX1509 I2C address (11)


SensorBar mySensorBar(SX1509_ADDRESS);


void setup()
{
  Serial.begin(9600);  // start serial for output
  Serial.println("Program started.");
  Serial.println();
  
  //For this demo, the IR will only be turned on during reads.
  mySensorBar.setBarStrobe();
  //Other option: Command to run all the time
  //mySensorBar.clearBarStrobe();


  //Default dark on light
  mySensorBar.clearInvertBits();
  //Other option: light line on dark
  //mySensorBar.setInvertBits();
  
  //Don't forget to call .begin() to get the bar ready.  This configures HW.
  uint8_t returnStatus = mySensorBar.begin();
  if(returnStatus)
  {
	  Serial.println("sx1509 IC communication OK");
  }
  else
  {
	  Serial.println("sx1509 IC communication FAILED!");
	  while(1);
  }
  Serial.println();
  
}


void loop()
{
  //Get the data from the sensor bar and load it into the class members
  uint8_t rawValue = mySensorBar.getRaw();
  
  //Print the binary value to the serial buffer.
  Serial.print("Bin value of input: ");
  for( int i = 7; i >= 0; i-- )
  {
    Serial.print((rawValue >> i) & 0x01);
  }
  Serial.println("b");


  //Print the hex value to the serial buffer.  
  Serial.print("Hex value of bar: 0x");
  if(rawValue < 0x10) //Serial.print( , HEX) doesn't pad zeros. Do it here
  {
	  //Pad a 0;
	  Serial.print("0");
  }
  Serial.println(rawValue, HEX);
  
  //Print the position and density quantities
  Serial.print("Position (-127 to 127): ");
  Serial.println(mySensorBar.getPosition());
  Serial.print("Density, bits detected (of 8): ");
  Serial.println(mySensorBar.getDensity());
  Serial.println("");
  
  //Wait 2/3 of a second
  delay(666);


}
